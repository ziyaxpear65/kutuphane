import streamlit as st
import sqlite3
import pandas as pd
from datetime import datetime

# Veritabanƒ± baƒülantƒ±sƒ±
conn = sqlite3.connect("library.db", check_same_thread=False)
c = conn.cursor()

# Geli≈ümi≈ü K√ºt√ºphane Veritabanƒ± Tablolarƒ±
c.execute('''CREATE TABLE IF NOT EXISTS books (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                title TEXT, author TEXT,
                genre TEXT, year INTEGER,
                available INTEGER)''')
c.execute('''CREATE TABLE IF NOT EXISTS members (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT, email TEXT UNIQUE, phone TEXT, join_date TEXT)''')
c.execute('''CREATE TABLE IF NOT EXISTS transactions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                book_id INTEGER, member_id INTEGER,
                issue_date TEXT, return_date TEXT,
                FOREIGN KEY(book_id) REFERENCES books(id),
                FOREIGN KEY(member_id) REFERENCES members(id))''')
conn.commit()


# Kitap ekleme fonksiyonu
def add_book(title, author, genre, year, quantity):
    existing_book = c.execute("SELECT * FROM books WHERE title = ? AND author = ?", (title, author)).fetchone()
    if existing_book:
        new_available = existing_book[5] + quantity
        c.execute("UPDATE books SET available = ? WHERE id = ?", (new_available, existing_book[0]))
        conn.commit()
    else:
        c.execute("INSERT INTO books (title, author, genre, year, available) VALUES (?, ?, ?, ?, ?)",
                  (title, author, genre, year, quantity))
        conn.commit()


# Kitap silme fonksiyonu
def delete_book(book_id):
    c.execute("DELETE FROM books WHERE id = ?", (book_id,))
    conn.commit()


# √úye ekleme fonksiyonu
def add_member(name, email, phone):
    c.execute("INSERT INTO members (name, email, phone, join_date) VALUES (?, ?, ?, ?)",
              (name, email, phone, datetime.now().strftime("%Y-%m-%d")))
    conn.commit()


# Kitap √∂d√ºn√ß alma fonksiyonu
def borrow_book(book_id, member_id):
    c.execute("UPDATE books SET available = 0 WHERE id = ?", (book_id,))
    c.execute("INSERT INTO transactions (book_id, member_id, issue_date) VALUES (?, ?, ?)",
              (book_id, member_id, datetime.now().strftime("%Y-%m-%d")))
    conn.commit()


# Kitap iade etme fonksiyonu
def return_book(book_id):
    c.execute("UPDATE books SET available = 1 WHERE id = ?", (book_id,))
    c.execute("UPDATE transactions SET return_date = ? WHERE book_id = ? AND return_date IS NULL",
              (datetime.now().strftime("%Y-%m-%d"), book_id))
    conn.commit()


def delete_member(member_id):
    borrowed = c.execute("SELECT * FROM transactions WHERE member_id = ? AND return_date IS NULL",
                         (member_id,)).fetchone()

    if borrowed:
        st.error("Bu √ºyenin aktif √∂d√ºn√ß aldƒ±ƒüƒ± kitaplar var. √ñnce iade edilmelidir!")
    else:
        c.execute("DELETE FROM members WHERE id = ?", (member_id,))
        conn.commit()
        st.success("√úye ba≈üarƒ±yla silindi!")


# √úye g√ºncelleme fonksiyonu
def update_member(member_id, name, email, phone):
    c.execute("UPDATE members SET name = ?, email = ?, phone = ? WHERE id = ?", (name, email, phone, member_id))
    conn.commit()
    st.success("√úye bilgileri ba≈üarƒ±yla g√ºncellendi!")


# Streamlit aray√ºz√º
st.title("üìö K√ºt√ºphane Y√∂netim Sistemi")
menu = st.sidebar.selectbox("Men√º", ["Kitaplar", "√úyeler", "ƒ∞≈ülemler", "ƒ∞statistikler", "Kitap Ara", "Arama",
                                     "Geli≈ümi≈ü Raporlar","√úye Kitap Hareketleri"])

if menu == "Kitaplar":
    st.subheader("üìñ Kitap Y√∂netimi")
    action = st.radio("ƒ∞≈ülem Se√ßin", ["Kitap Ekle", "Kitaplarƒ± G√∂r√ºnt√ºle", "Kitap Sil"])

    if action == "Kitap Ekle":
        title = st.text_input("Kitap Adƒ±")
        author = st.text_input("Yazar")
        genre = st.text_input("T√ºr")
        year = st.number_input("Yƒ±l", min_value=1000, max_value=2025, step=1)
        quantity = st.number_input("Adet", min_value=1, step=1)
        if st.button("Ekle"):
            add_book(title, author, genre, year, quantity)
            st.success("Kitap eklendi veya g√ºncellendi!")

    elif action == "Kitap Sil":
        book_id = st.number_input("Silinecek Kitap ID", min_value=1)
    if st.button("Sil"):
        delete_book(book_id)
        st.success("Kitap silindi!")
    else:
        books = pd.read_sql("SELECT * FROM books", conn)
        st.dataframe(books)

if menu == "√úyeler":
    st.subheader("üë§ √úye Y√∂netimi")
    action = st.radio("ƒ∞≈ülem Se√ßin", ["√úye Ekle", "√úyeleri G√∂r√ºnt√ºle", "√úye Sil", "√úye G√ºncelle"])
    if action == "√úye Ekle":
        name = st.text_input("√úye Adƒ±")
        email = st.text_input("E-posta")
        phone = st.text_input("Telefon", max_chars=11)
        if st.button("Ekle"):
            if phone.isdigit() and len(phone) == 11:
                add_member(name, email, phone)
                st.success("√úye eklendi!")
                st.rerun()
            else:
                st.error("Telefon numarasƒ± 11 haneli olmalƒ± ve sadece rakam i√ßermelidir!")

    elif action == "√úye G√ºncelle":
        member_id = st.number_input("G√ºncellenecek √úye ID", min_value=1)
        name = st.text_input("Yeni Ad")
        email = st.text_input("Yeni E-posta")
        phone = st.text_input("Yeni Telefon", max_chars=11)
        if st.button("G√ºncelle"):
            if phone.isdigit() and len(phone) == 11:
                update_member(member_id, name, email, phone)
                st.success("√úye g√ºncellendi!")
                st.rerun()
            else:
                st.error("Telefon numarasƒ± 11 haneli olmalƒ± ve sadece rakam i√ßermelidir!")
        members = pd.read_sql("SELECT * FROM members", conn)
        st.dataframe(members)

    elif action == "√úye Sil":
        member_id = st.number_input("Silinecek √úye ID", min_value=1)
        if st.button("Sil"):
            delete_member(member_id)
            st.success("√úye silindi!")
        members = pd.read_sql("SELECT * FROM members", conn)
        st.dataframe(members)

    elif action == "√úyeleri G√∂r√ºnt√ºle":
        members = pd.read_sql("SELECT * FROM members", conn)
        st.dataframe(members)
elif menu == "ƒ∞≈ülemler":
    st.subheader("üîÑ Kitap √ñd√ºn√ß Ver & ƒ∞ade Et")
    action = st.radio("ƒ∞≈ülem Se√ß", ["Kitap √ñd√ºn√ß Ver", "Kitap ƒ∞ade Al"])
    if action == "Kitap √ñd√ºn√ß Ver":
        book_id = st.number_input("Kitap ID", min_value=1)
        member_id = st.number_input("√úye ID", min_value=1)
        if st.button("√ñd√ºn√ß Ver"):
            borrow_book(book_id, member_id)
            st.success("Kitap √∂d√ºn√ß verildi!")
    else:
        book_id = st.number_input("Kitap ID", min_value=1)
        if st.button("ƒ∞ade Al"):
            return_book(book_id)
            st.success("Kitap iade edildi!")

elif menu == "ƒ∞statistikler":
    st.subheader("üìä K√ºt√ºphane ƒ∞statistikleri")
    total_books = c.execute("SELECT COUNT(*) FROM books").fetchone()[0]
    borrowed_books = c.execute("SELECT COUNT(*) FROM books WHERE available=0").fetchone()[0]
    total_members = c.execute("SELECT COUNT(*) FROM members").fetchone()[0]
    st.metric("Toplam Kitap Sayƒ±sƒ±", total_books)
    st.metric("√ñd√ºn√ß Verilen Kitap Sayƒ±sƒ±", borrowed_books)
    st.metric("Toplam √úye Sayƒ±sƒ±", total_members)

elif menu == "Kitap Ara":
    st.subheader("üîç Kitap Arama")
    search_title = st.text_input("Kitap Adƒ±nƒ± Girin")
    if st.button("Ara"):
        c.execute("SELECT * FROM books WHERE title = ?", (search_title,))
        book = c.fetchone()
        if book:
            st.write(f"**Kitap ID:** {book[0]}")
            st.write(f"**Adƒ±:** {book[1]}")
            st.write(f"**Yazar:** {book[2]}")
            st.write(f"**T√ºr:** {book[3]}")
            st.write(f"**Yƒ±l:** {book[4]}")
            st.write(f"**Durum:** {'Mevcut' if book[5] else '√ñd√ºn√ßte'}")
        else:
            st.warning("Bu kitap k√ºt√ºphanemizde mevcut deƒüil.")

elif menu == "Arama":
    st.subheader("üîç Kitap ve √úye Arama")
    search_type = st.radio("Arama T√ºr√º Se√ßin", ["Kitap Ara", "√úye Ara"])
    search_text = st.text_input("Aranacak Kelime")
    if st.button("Ara"):
        if search_type == "Kitap Ara":
            results = pd.read_sql("SELECT * FROM books WHERE title LIKE ?", conn, params=(f'%{search_text}%',))
        else:
            results = pd.read_sql("SELECT * FROM members WHERE name LIKE ?", conn, params=(f'%{search_text}%',))
        st.dataframe(results)
elif menu == "√úye Kitap Hareketleri":
    st.subheader("üìò √úyelerin Aldƒ±ƒüƒ± Kitaplar")
    member_id = st.number_input("√úye ID Girin", min_value=1)
    if st.button("G√∂ster"):
        query = '''SELECT books.title AS kitap_adi, transactions.issue_date AS odunc_alma_tarihi, transactions.return_date AS iade_tarihi
                   FROM transactions
                   JOIN books ON transactions.book_id = books.id
                   WHERE transactions.member_id = ?'''
        user_books = pd.read_sql(query, conn, params=(member_id,))
        if not user_books.empty:
            st.dataframe(user_books)
        else:
            st.warning("Bu √ºyenin herhangi bir √∂d√ºn√ß alƒ±nmƒ±≈ü kitabƒ± bulunmamaktadƒ±r.")
elif menu == "Geli≈ümi≈ü Raporlar":
    st.subheader("üìë Geli≈ümi≈ü Raporlar")

    # En √ßok okunan kitap
    most_read_book = c.execute(
        "SELECT books.title, COUNT(transactions.book_id) AS count FROM transactions JOIN books ON transactions.book_id = books.id GROUP BY transactions.book_id ORDER BY count DESC LIMIT 1").fetchone()
    if most_read_book:
        st.write(f"üìñ **En √áok Okunan Kitap:** {most_read_book[0]} ({most_read_book[1]} kez okunmu≈ü)")
    else:
        st.write("üìñ En √ßok okunan kitap bilgisi bulunamadƒ±.")

    # K√ºt√ºphanede en √ßok bulunan kitap t√ºr√º
    most_common_genre = c.execute(
        "SELECT genre, COUNT(*) as count FROM books GROUP BY genre ORDER BY count DESC LIMIT 1").fetchone()
    if most_common_genre:
        st.write(f"üìö **En √áok Bulunan Kitap T√ºr√º:** {most_common_genre[0]} ({most_common_genre[1]} adet)")
    else:
        st.write("üìö En √ßok bulunan kitap t√ºr√º bilgisi bulunamadƒ±.")

    # En √ßok kitap okuyan √ºye bilgisi
    most_active_member = c.execute(
        "SELECT members.name, members.email, COUNT(transactions.member_id) AS count FROM transactions JOIN members ON transactions.member_id = members.id GROUP BY transactions.member_id ORDER BY count DESC LIMIT 1").fetchone()
    if most_active_member:
        st.write(
            f"üë§ **En √áok Kitap Okuyan √úye:** {most_active_member[0]} - {most_active_member[1]} ({most_active_member[2]} kitap okumu≈ü)")
    else:
        st.write("üë§ En √ßok kitap okuyan √ºye bilgisi bulunamadƒ±.")

